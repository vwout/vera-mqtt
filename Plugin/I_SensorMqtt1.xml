<?xml version="1.0" encoding="UTF-8"?>
<implementation>
    <functions>
        local p
    	local u
        local m
        
        function startup(lul_device)
            luup.log("SensorMqtt: Loading plugin module L_SensorMqtt1 ...")
            if (package.path:find ("/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua", 1, true) == nil) then
                package.path = package.path .. ";/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua"
            end

            package.loaded.L_SensorMqtt1 = nil
            p = require("L_SensorMqtt1")
            if (package.loaded.L_SensorMqtt1 == nil) 
            then
                luup.log("SensorMqtt: Plugin is not installed correctly. Library L_SensorMqtt1 cannot be loaded.", 1)
                luup.task("Plugin not correctly installed", 2, "SensorMqtt plugin", -1)
                return false
            end
            luup.log("SensorMqtt: Plugin module L_SensorMqtt1 loaded")
            
            return p.startup(lul_device)
        end
    </functions>
    <startup>startup</startup>
	<actionList>
		<action>
			<serviceId>urn:upnp-sensor-mqtt-se:serviceId:SensorMqtt1</serviceId>
			<name>Subscribe</name>
			<job>
				p.subscribeMqttTopics(lul_settings.topics)
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-sensor-mqtt-se:serviceId:SensorMqtt1</serviceId>
			<name>Unsubscribe</name>
			<job>
				p.unsubscribeMqttTopics(lul_settings.topics)
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-sensor-mqtt-se:serviceId:SensorMqtt1</serviceId>
			<name>Publish</name>
			<job>
				p.publishMessage(lul_settings.topic, lul_settings.payload)
				return 4, nil
			</job>
		</action>
		<action>
			<serviceId>urn:upnp-org:serviceId:SwitchPower1</serviceId>
			<name>SetTarget</name>
			<job>
        topic = luup.variable_get("urn:upnp-sensor-mqtt-se:serviceId:SensorMqtt1", "mqttTopic", lul_device)
        -- get the last (second) topic
        -- in case multiple (comma) separated tokens are specified, 
        -- the first one is subscribe (receive status) and the second one is publish (send command)
        for t in topic:gmatch("[^,]+") do
          topic = t
        end
				p.publishMessage(topic, lul_settings.newTargetValue)
				return 4, nil
			</job>
		</action>
	</actionList>
</implementation>
